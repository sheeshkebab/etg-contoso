---
# Please note that this playbook is designed to be run via a callback from Tower.
# owner_name and instance_tag variables are to be passwd in as extra_vars.
- name: Play that will schedule a job in Tower
  hosts: all
  become: true
  gather_facts: false
  vars: 
    ec2_name_prefix: "{{ owner_name }}_{{ instance_tag }}"
  tasks:

  - name: echo the extra var for username
    debug:
      var: owner_name

  - name: echo the extra var instance_tag
    debug:
      var: instance_tag

  - name: echo the ec2_instancename
    debug:
      var: ec2_name_prefix   

- name: Add the scheduled task
  hosts: all
  vars:
    sched1: "{{ owner_name }}_{{ instance_tag }}_schedule"
  collections:
    - awx.awx.tower_schedule
    #- awx.awx.tower_schedule_rrule

  tasks:

    - name: Calculate the teardown date
      set_fact:
        #future_date: "{{ lookup('pipe', 'date +%Y-%m-%d-%H:%M:%S') }}"
        #future_date: "{{ '%Y-%m-%d %H:%M:%S' | strftime( ( ansible_date_time.epoch | int ) + ( 86400 * 2 )  ) }}"       
        #future_date: "{{ '%Y-%m-%d %H:%M:%S' | strftime( ( ansible_date_time['epoch'] | int + 25569 ) ) }}"       
        future_date: "{{ '%Y-%m-%d %H:%M:%S' | strftime( ( ansible_date_time['epoch'] | int + 3600 ) ) }}"       
    - debug:
        var: future_date

    - name: Build a teardown schedule for the jumphost 
      tower_schedule:
        name: "{{ sched1 }}"
        state: present
        unified_job_template: "contoso-schedule-teardown"
        #rrule: "{{ query('awx.awx.tower_schedule_rrule', 'none', timezone='Australia/Sydney', end_on=1, start_date='2020-09-30 13:05:51') }}"
        rrule: "{{ query('awx.awx.tower_schedule_rrule', 'none', timezone='Australia/Sydney', end_on=1, start_date=future_date) }}"
        #rrule: "DTSTART;TZID=Australia/Sydney:20200930T130551 RRULE:FREQ=DAILY;COUNT=1;INTERVAL=1"
        #rrule: "DTSTART;TZID=Australia/Sydney:20200929T103000 RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1"
        validate_certs: false
        extra_data: 
          owner_name: "{{ owner_name }}"
          instance_tag: "{{ instance_tag }}"
      register: result
